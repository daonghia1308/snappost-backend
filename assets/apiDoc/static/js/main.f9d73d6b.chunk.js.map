{
    "version": 3,
    "sources": [
        "logo.svg",
        "request.js",
        "App.js",
        "serviceWorker.js",
        "index.js"
    ],
    "names": [
        "module",
        "exports",
        "__webpack_require__",
        "p",
        "request",
        "post",
        "_ref",
        "Object",
        "asyncToGenerator",
        "regenerator_default",
        "a",
        "mark",
        "_callee",
        "url",
        "data",
        "option",
        "res",
        "rs",
        "wrap",
        "_context",
        "prev",
        "next",
        "concat",
        "method",
        "body",
        "JSON",
        "stringify",
        "headers",
        "Content-Type",
        "Accept-Language",
        "console",
        "log",
        "fetch",
        "sent",
        "json",
        "abrupt",
        "stop",
        "_x",
        "_x2",
        "apply",
        "this",
        "arguments",
        "types",
        "App",
        "props",
        "_this",
        "classCallCheck",
        "possibleConstructorReturn",
        "getPrototypeOf",
        "call",
        "state",
        "type",
        "Request",
        "i",
        "push",
        "setState",
        "input",
        "name",
        "react_default",
        "createElement",
        "Table",
        "map",
        "item",
        "index",
        "css",
        "required",
        "className",
        "description",
        "output",
        "example",
        "parse",
        "outputExample",
        "err",
        "response",
        "length",
        "Fragment",
        "r",
        "key",
        "_",
        "isEmpty",
        "JSONPretty_default",
        "_this2",
        "api",
        "Card",
        "CardBody",
        "id",
        "friendlyName",
        "CardTitle",
        "Alert",
        "color",
        "CardSubtitle",
        "inputs",
        "renderInput",
        "exits",
        "renderOutput",
        "exit",
        "href",
        "_this3",
        "Container",
        "value",
        "onChange",
        "evt",
        "target",
        "t",
        "renderList",
        "renderAPI",
        "Component",
        "Boolean",
        "window",
        "location",
        "hostname",
        "match",
        "ReactDOM",
        "render",
        "src_App_0",
        "document",
        "getElementById",
        "navigator",
        "serviceWorker",
        "ready",
        "then",
        "registration",
        "unregister"
    ],
    "mappings": "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",
    "file": "static/js/main.f9d73d6b.chunk.js",
    "sourcesContent": [
        "module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";",
        "import Local from './local';\r\nlet host = 'http://localhost:1337';\r\n// host = 'http://vanlang.mpoint.vn'\r\n// host = 'http://103.45.238.60:1337'\r\nlet request = {};\r\nrequest.post = async (url, data) => {\r\n    url = `http://localhost:1337${url}`\r\n    let option = {\r\n        method: 'POST', // or 'PUT'\r\n        body: JSON.stringify(data), // data can be `string` or {object}!\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            // 'Authorization': `Bearer ${Local.get('token') || 'customer'}`,\r\n            'Accept-Language': 'vi'\r\n        }\r\n    };\r\n    console.log('POST', url, option);\r\n    let res = await fetch(url, option);\r\n    let rs = await res.json();\r\n    console.log('RESPOND', rs);\r\n    return rs;\r\n}\r\nexport default request;",
        "import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport _ from 'lodash';\nimport Request from './request';\nimport JSONPretty from 'react-json-pretty';\nimport 'react-json-pretty/themes/monikai.css';\nimport {\n  Card, CardImg, CardText, CardBody,\n  CardTitle, CardSubtitle, Button, Container, Alert, Col, ListGroup, ListGroupItem, Table\n} from 'reactstrap';\nconst types = ['customer', 'backend']\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      type: ''\n    }\n  }\n  async componentDidMount() {\n    let rs = await Request.post('/api/docgen', {});\n    let data = [];\n    for (var i in rs.rs) {\n      rs.rs[i].url = `/api/${i}`\n      data.push(rs.rs[i]);\n    }\n    this.setState({ data });\n  }\n  renderInput(input) {\n    let data = [];\n    for (var i in input) {\n      input[i].name = i;\n      data.push(input[i]);\n    }\n    return (<Table>\n      <thead>\n        <tr>\n          <th>Stt</th>\n          <th>Tham số</th>\n          <th>Bắt buộc</th>\n          <th>Kiểu dữ liệu</th>\n          <th>Mô tả</th>\n        </tr>\n      </thead>\n      <tbody>\n        {data.map((item, index) => {\n          let css = '';\n          if (item.required) css = 'required text-danger';\n          return <tr className={css}>\n            <td>{index + 1}</td>\n            <td>{item.name}</td>\n            <td>{item.required ? <span>Bắt buộc</span> : <span>Không</span>}</td>\n            <td>{item.type}</td>\n            <td>{item.description}</td>\n          </tr>\n        })}\n      </tbody>\n    </Table>)\n  }\n\n  renderOutput(output) {\n    let data = [];\n    for (var i in output) {\n      output[i].name = i;\n      data.push(output[i]);\n    }\n    return (<div>\n      {data.map((item, index) => {\n        if (item.name == 'error') return null;\n        let example = {};\n        try {\n          example = JSON.parse(item.outputExample);\n        } catch (err) {\n          console.log('parse error', item.outputExample);\n        }\n        if (!item.response) item.response = [];\n        return <div className='output-container'>\n          <p className='header'>{item.name}</p>\n          {item.response.length > 0 ? <React.Fragment>\n            <p>Trường dữ liệu trả về</p>\n            <Table>\n              <thead>\n                <tr>\n                  <th>Stt</th>\n                  <th>Trường dữ liệu</th>\n                  <th>Kiểu dữ liệu</th>\n                  <th>Mô tả dữ liệu</th>\n                </tr>\n              </thead>\n              <tbody>\n                {item.response.map((r, index) => {\n                  return <tr>\n                    <td>{index + 1}</td>\n                    <td>{r.key}</td>\n                    <td>{r.type}</td>\n                    <td>{r.description}</td>\n                  </tr>\n                })}\n              </tbody>\n            </Table>\n          </React.Fragment> : null}\n          {!_.isEmpty(example) ? <React.Fragment>\n            <p>Dữ liệu mẫu</p>\n            <JSONPretty data={example}></JSONPretty>\n          </React.Fragment> : null}\n\n        </div>\n      })}\n    </div>)\n  }\n  renderAPI(data) {\n    return (\n      <div>\n        {data.map((api, index) => {\n          return <Card className='api-container'>\n            <CardBody id={api.friendlyName}>\n              <CardTitle><h4>{api.friendlyName}</h4></CardTitle>\n              <Alert color='success'>{api.url}</Alert>\n              {api.description ? <CardSubtitle>{api.description}</CardSubtitle> : null}\n              {!_.isEmpty(api.inputs) ? <React.Fragment>\n                <h5>Đầu vào</h5>\n                {this.renderInput(api.inputs)}\n              </React.Fragment> : null}\n              {!_.isEmpty(api.exits) ? <React.Fragment>\n                <h5>Đầu ra</h5>\n                {this.renderOutput(api.exits)}\n              </React.Fragment> : null}\n            </CardBody>\n          </Card>\n        })}\n      </div>\n    )\n  }\n  renderExits(exit) {\n\n  }\n  renderList(data) {\n    return (\n      <div>\n        <ul className='api-list'>\n          {data.map((api, index) => {\n            return (<li><a href={`#${api.friendlyName}`}>{api.friendlyName}</a></li>)\n          })}\n        </ul>\n      </div>\n    )\n  }\n  render() {\n    return (\n      <Container>\n        <div className='row'>\n          <div className='col col-md-4'>\n            <p>Chọn loại API</p>\n            <select className='form-control' value={this.state.type} onChange={evt => {\n              this.setState({ type: evt.target.value })\n            }}>\n              {types.map((t, index) => <option value={t}>{t}</option>)}\n            </select>\n            {this.renderList(this.state.data)}\n          </div>\n          <div className='col col-md-8'>\n            {this.renderAPI(this.state.data)}\n          </div>\n        </div>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n",
        "// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n",
        "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"
    ],
    "sourceRoot": ""
}